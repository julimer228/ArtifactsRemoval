%% script to process results

% load data from table
% gaussian filter results
gauss_otsu = readtable("..\Results\Tables\Raw\otsu_gauss.csv");
gauss_multilevel=readtable("..\Results\Tables\Raw\multilevel_tresholding_gauss.csv");
gauss_fixed=readtable("..\Results\Tables\Raw\fixed_multilevel_tresholding_gauss.csv");
t_gauss={gauss_otsu, gauss_multilevel, gauss_fixed};

% avg filter results
avg_otsu = readtable("..\Results\Tables\Raw\otsu_avg.csv");
avg_multilevel=readtable("..\Results\Tables\Raw\multilevel_tresholding_avg.csv");
avg_fixed=readtable("..\Results\Tables\Raw\fixed_multilevel_tresholding_avg.csv");
t_avg={avg_otsu, avg_multilevel, avg_fixed};

% parameters for extracting rows
sigmas = {0.4 ; 0.7 ; 1.1 ; 1.4 ; 1.7 ; 2};
filter_sizes = {2 ; 4 ; 6 ; 8 ; 10 ; 12};
methods = {'otsu'; 'multilevel_tresholding'; 'fixed_multilevel_tresholding'};

% tables for results
% gaussian filter
t_size_gauss = {'Size' [0 13]};
t_vars_gauss = {'VariableTypes', ["string", "string", "double", ...
    "double", "double", "double", "double","double","double","double", "double", "double", "double"]};

t_names_gauss = {'VariableNames', ["type", "method", "sigma", ...
    "filter_size", "jpg_PSNR", "PSNR", "deltaPSNR","jpg_SSIM","SSIM",...
    "deltaSSIM", "jpg_brisque", "brisque", "deltaBrisque"]};

gauss_mean_table = table(t_size_gauss{:}, t_vars_gauss{:}, t_names_gauss{:});
t_gauss_res={gauss_mean_table, gauss_mean_table, gauss_mean_table};

% avg filter 
t_size_avg = {'Size' [0 12]};
t_vars_avg = {'VariableTypes', ["string", "string", ...
    "double", "double", "double", "double","double","double","double", "double", "double", "double"]};

t_names_avg = {'VariableNames', ["type", "method", ...
    "filter_size", "jpg_PSNR", "PSNR", "deltaPSNR","jpg_SSIM","SSIM",...
    "deltaSSIM", "jpg_brisque", "brisque", "deltaBrisque"]};

avg_mean_table = table(t_size_avg{:}, t_vars_avg{:}, t_names_avg{:});
t_avg_res={avg_mean_table, avg_mean_table, avg_mean_table};

%% count means for gaussian filtration results
for k=1:length(t_gauss_res)
    for i=1:length(sigmas)
        for j=1:length(filter_sizes)
            % extract rows
            idx=t_gauss{k}.sigma==sigmas{i} & t_gauss{k}.filter_size==filter_sizes{j};
            rows=t_gauss{k}(idx, :);
            % count means
            PSNR_mean=mean(rows{:,"PSNR"});
            delta_PSNR_mean=mean(rows{:,"delta_PSNR"});
            SSIM_mean=mean(rows{:,"SSIM"});
            delta_SSIM_mean=mean(rows{:,"delta_SSIM"});
            brisque_mean=mean(rows{:,"im_brisque"});
            delta_brisque_mean=mean(rows{:,"delta_brisque"});
            % save results to the table
            t_gauss_res{k}(end+1,:)={rows.type(1),rows.method(1), ...
                    rows.sigma(1), rows.filter_size(1), rows.jpg_PSNR(1), PSNR_mean, delta_PSNR_mean, rows.jpg_SSIM(1),...
                    SSIM_mean, delta_SSIM_mean, rows.jpg_brisque(1), brisque_mean, delta_brisque_mean};
        end
    end
end

%% count means for avg filtration results
for k=1:length(t_avg_res)
    for i=1:length(filter_sizes)
            % extract rows
            idx=t_avg{k}.filter_size==filter_sizes{i};
            rows=t_avg{k}(idx, :);
            % count means
            PSNR_mean=mean(rows{:,"PSNR"},8);
            delta_PSNR_mean=mean(rows{:,"delta_PSNR"},8);
            SSIM_mean=mean(rows{:,"SSIM"},8);
            delta_SSIM_mean=mean(rows{:,"delta_SSIM"},8);
            brisque_mean=mean(rows{:,"im_brisque"},8);
            delta_brisque_mean=mean(rows{:,"delta_brisque"},8);
            % save results to the table
            t_avg_res{k}(end+1,:)={rows.type(1),rows.method(1), ...
                    rows.filter_size(1), rows.jpg_PSNR(1), PSNR_mean, delta_PSNR_mean, rows.jpg_SSIM(1),...
                    SSIM_mean, delta_SSIM_mean, rows.jpg_brisque(1), brisque_mean, delta_brisque_mean};
    end
end

%% save results to the csv file [methods{i}_filter_means.csv] 
% Path to the folder for results tables 
folder_csv ='..\Results\Tables\Mean\';

% gaussian filter
for i=1:length(t_avg_res)
    writetable(t_avg_res{i}, string(strcat(folder_csv,string(methods{i}),'_avg_means.csv'))); 
end

% avg filter
for i=1:length(t_gauss_res)
     writetable(t_gauss_res{i}, strcat(folder_csv, string(methods{i}),'_gauss_means.csv'));
end

%% Create heatmaps
% filepath to the results
folder_heatmaps='..\Results\Tables\Heatmaps\';

% gaussian filter
% columns with metrics
columns_gauss={6; 7; 9; 10; 12; 13};

for i=1:length(t_gauss_res)
    for j=1:length(columns_gauss)
         % extract the column's name
         column_name=t_gauss_res{i}.Properties.VariableNames{columns_gauss{j}};
         % create a heatmap
         h=heatmap(t_gauss_res{i},"sigma","filter_size", ColorVariable=column_name);
         % save the heatmap
         exportgraphics(h, strcat(folder_heatmaps,column_name,"_",methods{i},"_","gauss.jpg"))
    end
end

% avg filter
% columns with metrics
columns_avg={5; 6; 8; 9; 11; 12};

for i=1:length(t_avg_res)
    for j=1:length(columns_avg)
         % extract the column's name
         column_name=t_avg_res{i}.Properties.VariableNames{columns_avg{j}};
         % create a heatmap
         h=heatmap(t_avg_res{i},"filter_size","filter_size", ColorVariable=column_name);
         % save the heatmap
         exportgraphics(h, strcat(folder_heatmaps,column_name,"_",methods{i},"_","avg.jpg"))
    end
end

%% Create boxplots
